// Given a string str of length N, you have to find number of palindromic subsequence (need not necessarily be distinct) which could be formed from the string str.
Note: You have to return the answer module 109+7;

import java.util.*;
class GFG
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		sc.nextLine();
		while(t>0)
		{
			String str = sc.nextLine();
			//System.out.println(str.length());
			Solution ob  = new Solution();
			System.out.println(ob.countPS(str));
		t--;
		}
	}
}// } Driver Code Ends


/*You are required to complete below method */

class Solution
{
    long countPS(String str)
    {
        // Your code here
        long [][]dp=new long[str.length()][str.length()];
        int i,j,gap;
        
        for(gap=0;gap<str.length();gap++){
            for(i=0,j=gap; j<str.length(); i++,j++){
                if(gap==0)
                    dp[i][j] = 1;
                else if(gap==1)
                    dp[i][j] = str.charAt(i)==str.charAt(j)?3:2;
                else{
                    if(str.charAt(i) == str.charAt(j))
                        dp[i][j] = (dp[i][j-1] + dp[i+1][j]+1) % 1000000007;
                    else
                        dp[i][j] = (dp[i][j-1] + dp[i+1][j]-dp[i+1][j-1]) % 1000000007;
                }
                if(dp[i][j] < 0) dp[i][j]+=1000000007;
            }
        }
        return dp[0][str.length()-1] % 1000000007;
    }
}